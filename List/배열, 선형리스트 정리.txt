						<선형리스트(순차리스트)>
- 자료를 구조화하는 가장 기본적인 방법으로 자료를 나열한 목록 또는 자료들 간에 순서를 갖는 리스트.
- 배열의 문제점을 해결하기 위한 구조자료
- 빈틈없는 데이터의 적재라는 장점을 가진다
- 원소를 삭제했을 때 삭제된 데이터 뒤 원소로 빈틈없이 연속적으로 위치시킨다.
- 리스트의 핵심은 원소들 가느이 순서로 순서가 있는 데이터의 모임이 리스트이며 리스트를 다른 이름으로
  시퀸스(sequence)라고도 부른다.
- 배열에서 인덱스는 유일무이한 식별자이지만 리스트에서는 몇번째 데이터인지 정도의 의미를 가진다.
- 빈 엘리먼트는 허용하지 않는다.
- 순차성을 보장하지 못하기 때문에 spacial locality 보장이 되지 않아 cash hit가 어렵다
- spacial locality : 프로그램 실행 시 접근하는 메모리 영역은 이미 접근이 이루어진 영역의 근처일 확률이
					 높다는 프로그램 성격 표현
- 언어별로 list를 지원하는 것이 다르다
  - 최근 언어들은 리스트를 기본으조 제곤
  - C		  : 리스트 지원 안한
  - JavaScript : 배열에 리스트기능 포함
  - Python	  : 기본 리스트, 배열지원 x
  - Java		  : 배열과 리스트 모두 지원, ArrayList와 LinkedList로 나뉨
- ArrayList와 LinkedList는 구현 방법에 따라 나뉜다.
- ArrayList
  - 배열을 이용해 리스트를 구현한 것
  - 접근이 빠름(순차 x) 하지만 데이터 추가와 삭제가 느림
  - 동적으로 사용하기 힘듬(자바의 경우 자동으로 사이즈를 키워서 관리한다. → Dynamic Array)
- LinkedList
  - 연결로 구현한 리스트
  - 한 원소에서 값과 다음 원소의 주소를 알고 연결하는 방식
  - 순차적으로 접근함 W(n)
  - 삽입, 삭제는 O(1)이지만 해당 지점까지 접근해야하므로 W(n)일 수 있음
  - → 배열과 다르게 논리적 저장 순서와 물리적 저장 순서가 일치하지 않는다!

					<배열>
- 배열은 동일한 자료형(기본 자료형, 구조체, 포인터등)들이 (색인, 원소)의 순서쌍으로 집단화한 
- 선형 자료구조(순차적 저장, 유한 집합)이다.

- 배열은 Compile time에 할당되는 정적 메모리 할당, 리스트는 새로운 Node가 추가되는 runtime에 할당되는 동적 메모리 할당
- 런타임 : 컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행될 때
- 컴파일 타임 : 소스 코드가 컴파일을 통해 기계어 코드로 변환되어 실행 가능한 프로그램이 되는 편집 과정